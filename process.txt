注: 项目中 注释 // - ****** 其中"-" 代表 改变 后将这行注释删除
一. 安装稳定版 node
二. 安装 webpack (建议本地安装)
  1. 特定版本 或者 指定版本
    npm install --save-dev webpack
    npm install --save-dev webpack@<version>
  2. webpack4+ 需要安装webpack-cli
    npm install --save-dev webpack-cli
  3. webpack 通过运行一个或多个 npm scripts，会在本地 node_modules 目录中查找安装的 webpack
三. 起步
  1. 基本安装
    (1). 创建webpac-demo目录并进入该文件夹: mkdir webpack-demo && cd webpack-demo
    (2). 初始化 npm: npm init -y
    (3). 本地安装 webpack及webpack-cli: npm install webpack webpack-cli --save-dev
    (4). 在 webpack-demo 目录下创建index.html: cd.>index.html
    (5). 在 webpack-demo 目录下创建 src 文件夹: md src
    (6). 在 webpack-demo/src 目录下创建index.js文件:cd src && cd.>index.js
    (7). 退至 webpack-demo 根目录: cd..
		(8). 使用 VScode 打开 webpack-demo 项目: code .
	2. 将 webpack-demo 加入版本控制
		(1). 初始化git仓库: git init
		(2). 配置忽略文件: 
			创建忽略文件: vim gitignore(进入vim模式)
			添加忽略规则: node_modules/ *.zip demo.html !src/ !index.html
			退出 vim 模式: 按 esc 输入:wq 点击回车
	3. 打开 src/index.js 添加如下代码
		(1). function component() {
						// 创建 div 元素
						let element = document.createElement('div')

						// lodash (目前在 index.html 中通过一个 script 脚本引入) 对于执行这一项必须的 
						element.innerHTML = _.join(['hello', 'webpack'], '')

						return element
					}
					document.body.appendChild(component())
		(2). 在 index.js 中引入 lodash 和 src/index.js
					<!DOCTYPE html>
					<html lang="en">
					<head>
						<meta charset="UTF-8">
						<meta name="viewport" content="width=device-width, initial-scale=1.0">
						<meta http-equiv="X-UA-Compatible" content="ie=edge">
						<title>起步</title>
						<script src="https://unpkg.com/lodash@4.16.6">
						</script>
					</head>
					<body>
						<script src='./src/index.js'>
						</script>
					</body>
					</html>
		(3). 调整 package.json 文件, 确保我们安装包是 私有的(private), 并且移除 main 入口, 防止意外发布代码
	4. 创建一个 bundle 文件
		(1). 调整目录结构
			在 webpack-demo 目录下新建 /dist/index.html 文件 删除 webpack/index.html 文件
		(2). 在 index.js 中 打包 lodash 依赖( 需在本地安装 library )
			npm install --save lodash
			注意: 安装一个用于打包到生产环境的安装包时，使用 npm install --save，
						安装一个用于开发环境的安装包（例如，linter, 测试库等），你应该使用 npm install --save-dev
		(3). 在 src/index.js 中 import lodash
				+ import _ from 'lodash';
				+
					function component() {
						var element = document.createElement('div');

				-   // Lodash, currently included via a script, is required for this line to work
				+   // Lodash, now imported by this script
						element.innerHTML = _.join(['Hello', 'webpack'], ' ');

						return element;
					}

					document.body.appendChild(component());
		(4). 更新 index.html
			由于现在通过 import 引入 lodash 所以将 dist/index.html 中 <script> 标签删除
			然后修改另一个 <script> 标签来加载 bundle 而不是原始的 /src 文件:
			dist/index.html
					<!doctype html>
					<html>
					 <head>
						 <title>起步</title>
				-    <script src="https://unpkg.com/lodash@4.16.6"></script>
					 </head>
					 <body>
				-    <script src="./src/index.js"></script>
				+    <script src="main.js"></script>
					 </body>
					</html>
		(5). 打包 webpack-demo 项目
			打开控制台
			执行 npx webpack 命令进行打包 
			在浏览器中打开 dist/index.html 文件, 看到 hello webpack 字样 说明打包成功
	5. 模块
		(1). webpack 支持 import 和 export 语句
		(2). webpack 不会更改代码中除 import 和 export 语句以外的部分
	6. 使用配置文件
		(1). 为什么使用配置
			项目会需求多样化和个性化,需要很复杂的配置,webpack 仍然要支持配置文件,比在终端手动输入大量命令更高效
		(2). 增加 webpack-demo/webpack.config.js 文件

			const path = require('path');

			module.exports = {
				entry: './src/index.js',
				output: {
					filename: 'bundle.js',
					path: path.resolve(__dirname, 'dist')
				}
			};
	7. 插播内容: 使用 git 作为版本控制 忘记 dist 加入忽略了 记录下已经在远程库的文件如何加入忽略
		1. git rm 与 git rm --cached 区别
			当我们需要删除暂存区或分支上的文件, 同时工作区也不需要这个文件了, 可以使用
				git rm file_path
				git commit -m 'delete somefile'
				git push
			当我们需要删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制, 可以使用
				git rm --cached file_path
				git commit -m 'delete remote somefile'
				git push
		2. 经过第一步聊解 使用以下 git 命令操作 删除远程 库中文件
			git rm -r --cached dist
			git commit -m "删除 dist 文件夹"
			git push origin master
		3. 将 dist 加入 .gitignore
			vi .gitignore (将进入 vim 文本编辑模式 会看到 .gitignore 中所有忽略文件规则)
			按 键盘 i 键 进入编辑状态 将光标 移动到最后一个 忽略规格 末尾 敲击回车 换行
			输入 dist/ 
			按 esc 退出编辑状态
			输入 :wq 保存 退出
			git add .gitignore 
			git commit -m "增加忽略文件 dist/")
			git push origin master


		